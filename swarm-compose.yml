version: "3.3"

networks:
  mongo:
    external: true
  mongos:
    external: true

volumes:
    data: {}
    cfg: {}

services:

  data1:
    image: mongo:3.4
    networks:
      - mongo
    volumes:
      - data:/data/db
    command: mongod --shardsvr --replSet datars --smallfiles --port 27017
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.role == cfg1

  data2:
    image: mongo:3.4
    networks:
      - mongo
    volumes:
      - data:/data/db
    command: mongod --shardsvr --replSet datars --smallfiles --port 27017
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.role == cfg2

  data3:
    image: mongo:3.4
    networks:
      - mongo
    volumes:
      - data:/data/db
    command: mongod --shardsvr --replSet datars --smallfiles --port 27017
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.role == cfg3

  cfg1:
    image: mongo:3.4
    networks:
      - mongo
    volumes:
      - cfg:/data/configdb
    command: mongod --configsvr --replSet cfgrs --smallfiles --port 27017
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.role == cfg1

  cfg2:
    image: mongo:3.4
    networks:
      - mongo
    volumes:
      - cfg:/data/configdb
    command: mongod --configsvr --replSet cfgrs --smallfiles --port 27017
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.role == cfg2

  cfg3:
    image: mongo:3.4
    networks:
      - mongo
    volumes:
      - cfg:/data/configdb
    command: mongod --configsvr --replSet cfgrs --smallfiles --port 27017
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.role == cfg3

  mongos1:
    image: mongo:3.4
    networks:
      - mongo
      - mongos
    command: mongos --configdb cfgrs/cfg1:27017,cfg2:27017,cfg3:27017
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.role == mongos1

  mongos2:
    image: mongo:3.4
    networks:
      - mongo
      - mongos
    command: mongos --configdb cfgrs/cfg1:27017,cfg2:27017,cfg3:27017
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.role == mongos1

  bootstrap:
    image: stefanprodan/mongo-bootstrap:latest
    networks:
      - mongo
    command:
      - '-dataSet=datars/data1:27017,data2:27017,data3:27017'
      - '-configSet=cfgrs/cfg1:27017,cfg2:27017,cfg3:27017'
      - '-mongos=mongos1:27017,mongos2:27017'
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  redis:
    image: redis
    command: redis-server
    networks:
      - redis
    ports:
      - "6379:6379"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  master:
    image: yuance/apicrawler:latest
#    command: "python -c \"while True: pass\""
    entrypoint: "start_master.sh"
    networks:
      - mongos
      - redis
#    volumes:
#      - ./apicrawler
    depends_on:
      - redis
      - mongos1

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  slave1:
    image: yuance/apicrawler:latest
    entrypoint: "start_slave1.sh"
    networks:
      - mongos
      - redis
#    volumes:
#      - ./apicrawler_slave1

    depends_on:
      - redis
      - master

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == slave

  slave2:
    image: yuance/apicrawler:latest
    entrypoint: "start_slave1.sh"
    networks:
      - mongos
      - redis
#    volumes:
#      - ./apicrawler_slave1

    depends_on:
      - redis
      - master

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == slave

  slave3:
    image: yuance/apicrawler:latest
    entrypoint: "start_slave1.sh"
    networks:
      - mongos
      - redis
#    volumes:
#      - ./apicrawler_slave1

    depends_on:
      - redis
      - master

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == slave